definitions:
  dto.Account:
    properties:
      id:
        type: integer
      login:
        description: Логин в системе
        type: string
      password:
        description: Пароль
        type: string
    type: object
  dto.Disease:
    properties:
      degreeOfDanger:
        type: integer
      id:
        type: integer
      name:
        type: string
      threat:
        type: string
    type: object
  dto.Doctor:
    properties:
      id:
        type: integer
      photoPath:
        type: string
      role:
        type: string
      speciality:
        type: string
      surname:
        type: string
      tokenId:
        type: string
    type: object
  dto.Patient:
    properties:
      degreeOfDanger:
        type: integer
      diseaseId:
        type: integer
      height:
        type: integer
      id:
        type: integer
      name:
        type: string
      patronymic:
        type: string
      roomNumber:
        type: integer
      surname:
        type: string
      weight:
        type: number
    type: object
  dto.Room:
    properties:
      floor:
        type: integer
      id:
        type: integer
      num:
        type: integer
      numberBeds:
        type: integer
      numberPatients:
        type: integer
      typeRoom:
        type: string
    type: object
  dto.Treatment:
    properties:
      id:
        type: integer
      patientNumber:
        type: integer
      psychologicalTreatment:
        type: string
      survey:
        type: string
      tablets:
        type: string
      updateAt:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  model.Account:
    properties:
      Login:
        example: Login
        type: string
      PasswordHash:
        example: PasswordHash
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.AddAccount:
    properties:
      Login:
        example: Login
        type: string
      PasswordHash:
        example: PasswordHash
        type: string
    type: object
  model.AddDisease:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Name:
        example: Abrobius
        type: string
      Threat:
        example: Заболел
        type: string
    type: object
  model.AddDiseaseToPatient:
    properties:
      DiseaseId:
        example: 1
        format: int64
        type: integer
      patientId:
        example: 1
        format: int64
        type: integer
    type: object
  model.AddDoctor:
    properties:
      PhotoPath:
        example: doctor PhotoPath
        type: string
      Role:
        example: doctor role
        type: string
      Speciality:
        example: doctor speciality
        type: string
      TokenId:
        example: TokenId
        type: string
      surname:
        example: doctor surname
        type: string
    type: object
  model.AddDoctorsPatients:
    properties:
      doctorId:
        example: 1
        format: int64
        type: integer
      patientId:
        example: 1
        format: int64
        type: integer
    type: object
  model.AddPatient:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Height:
        example: 180
        type: integer
      Name:
        example: patient Name
        type: string
      Patronymic:
        example: patient patronymic
        type: string
      RoomNumber:
        example: 6
        type: integer
      Surname:
        example: patient surname
        type: string
      Weight:
        example: 42
        type: number
    type: object
  model.AddRoom:
    properties:
      Floor:
        example: 1
        type: integer
      Num:
        example: 1
        type: integer
      NumberBeds:
        example: 1
        type: integer
      NumberPatients:
        example: 1
        type: integer
      TypeRoom:
        example: "1"
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.AddTreatment:
    properties:
      PatientNumber:
        example: 1
        type: integer
      PsychologicalTreatment:
        example: Заболел
        type: string
      Survey:
        example: "1"
        type: string
      Tablets:
        example: Abrobius
        type: string
    type: object
  model.Disease:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Name:
        example: Abrobius
        type: string
      Threat:
        example: Заболел
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.Doctor:
    properties:
      PhotoPath:
        example: doctor PhotoPath
        type: string
      Role:
        example: doctor role
        type: string
      Speciality:
        example: doctor speciality
        type: string
      Surname:
        example: doctor surname
        type: string
      TokenId:
        example: TokenId
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.Patient:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Height:
        example: 180
        type: integer
      Name:
        example: patient Name
        type: string
      Patronymic:
        example: patient patronymic
        type: string
      RoomNumber:
        example: 6
        type: integer
      Surname:
        example: patient surname
        type: string
      Weight:
        example: 42
        type: number
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.Room:
    properties:
      Floor:
        example: 1
        type: integer
      Num:
        example: 1
        type: integer
      NumberBeds:
        example: 1
        type: integer
      NumberPatients:
        example: 1
        type: integer
      TypeRoom:
        example: "1"
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.Treatment:
    properties:
      PatientNumber:
        example: 1
        type: integer
      PsychologicalTreatment:
        example: Заболел
        type: string
      Survey:
        example: "1"
        type: string
      Tablets:
        example: Abrobius
        type: string
      UpdatedAt:
        example: "1"
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.UpdateAccount:
    properties:
      Login:
        example: Login
        type: string
      PasswordHash:
        example: PasswordHash
        type: string
    type: object
  model.UpdateDisease:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Name:
        example: Abrobius
        type: string
      Threat:
        example: Заболел
        type: string
    type: object
  model.UpdateDoctor:
    properties:
      PhotoPath:
        example: doctor PhotoPath
        type: string
      Role:
        example: doctor role
        type: string
      Speciality:
        example: doctor speciality
        type: string
      TokenId:
        example: TokenId
        type: string
      surname:
        example: doctor surname
        type: string
    type: object
  model.UpdatePatient:
    properties:
      DegreeOfDanger:
        example: 1
        type: integer
      Height:
        example: 180
        type: integer
      Name:
        example: patient Name
        type: string
      Patronymic:
        example: patient patronymic
        type: string
      RoomNumber:
        example: 6
        type: integer
      Surname:
        example: patient surname
        type: string
      Weight:
        example: 42
        type: number
    type: object
  model.UpdateRoom:
    properties:
      Floor:
        example: 1
        type: integer
      Num:
        example: 1
        type: integer
      NumberBeds:
        example: 1
        type: integer
      NumberPatients:
        example: 1
        type: integer
      TypeRoom:
        example: "1"
        type: string
      id:
        example: 1
        format: int64
        type: integer
    type: object
  model.UpdateTreatment:
    properties:
      PatientNumber:
        example: 1
        type: integer
      PsychologicalTreatment:
        example: Заболел
        type: string
      Survey:
        example: "1"
        type: string
      Tablets:
        example: Abrobius
        type: string
    type: object
info:
  contact: {}
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: get Account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Account
      tags:
      - Account
    post:
      consumes:
      - application/json
      description: add Account by json
      parameters:
      - description: Add Account
        in: body
        name: Account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add an Account
      tags:
      - Account
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by Account ID
      parameters:
      - description: Account ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a Account
      tags:
      - Account
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show an Account
      tags:
      - Account
    patch:
      consumes:
      - application/json
      description: Update by json Account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Account
        in: body
        name: Account
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a Account
      tags:
      - Account
  /accounts/old:
    post:
      consumes:
      - application/json
      description: add Doctor by json
      parameters:
      - description: Add Doctor
        in: body
        name: Doctor
        required: true
        schema:
          $ref: '#/definitions/model.AddDoctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Doctor
      tags:
      - Account
  /authcheck:
    get:
      consumes:
      - application/json
      description: get Account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: AuthCheck Account
      tags:
      - Account
  /diseases:
    get:
      consumes:
      - application/json
      description: get Disease
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Disease'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Disease
      tags:
      - Disease
    post:
      consumes:
      - application/json
      description: add Disease by json
      parameters:
      - description: Add disease
        in: body
        name: Disease
        required: true
        schema:
          $ref: '#/definitions/model.AddDisease'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Disease
      tags:
      - Disease
  /diseases/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by disease ID
      parameters:
      - description: Disease ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a disease
      tags:
      - Disease
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Disease ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Disease
      tags:
      - Disease
    patch:
      consumes:
      - application/json
      description: Update by json disease
      parameters:
      - description: Disease ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update disease
        in: body
        name: disease
        required: true
        schema:
          $ref: '#/definitions/model.UpdateDisease'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a disease
      tags:
      - Disease
  /doctors:
    get:
      consumes:
      - application/json
      description: get Doctors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Doctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Doctors
      tags:
      - Doctors
    post:
      consumes:
      - application/json
      description: add Doctor by json
      parameters:
      - description: Add doctor
        in: body
        name: Doctor
        required: true
        schema:
          $ref: '#/definitions/model.AddDoctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Doctor
      tags:
      - Doctors
  /doctors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by doctor ID
      parameters:
      - description: Doctor ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a doctor
      tags:
      - Doctors
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Doctor
      tags:
      - Doctors
    patch:
      consumes:
      - application/json
      description: Update by json doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update doctor
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/model.UpdateDoctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a doctor
      tags:
      - Doctors
  /doctorsPatients:
    post:
      consumes:
      - application/json
      description: add DoctorsPatients by json
      parameters:
      - description: Add doctorsPatients
        in: body
        name: Doctor
        required: true
        schema:
          $ref: '#/definitions/model.AddDoctorsPatients'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a DoctorsPatients
      tags:
      - doctorsPatients
  /doctorsPatients/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show Doctor's patients
      tags:
      - doctorsPatients
  /login:
    post:
      consumes:
      - application/json
      description: login Account by json
      parameters:
      - description: Login Account
        in: body
        name: Account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Login an Account
      tags:
      - Account
  /logout:
    get:
      consumes:
      - application/json
      description: get Account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Logout Account
      tags:
      - Account
  /patients:
    get:
      consumes:
      - application/json
      description: get Patients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Patient'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Patients
      tags:
      - Patients
    post:
      consumes:
      - application/json
      description: add Patient by json
      parameters:
      - description: Add patient
        in: body
        name: Patient
        required: true
        schema:
          $ref: '#/definitions/model.AddPatient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Patient
      tags:
      - Patients
  /patients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by patient ID
      parameters:
      - description: Patient ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a patient
      tags:
      - Patients
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Patient
      tags:
      - Patients
    patch:
      consumes:
      - application/json
      description: Update by json patient
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update patient
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePatient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a patient
      tags:
      - Patients
  /patientsDisease:
    post:
      consumes:
      - application/json
      description: add Disease by json
      parameters:
      - description: Add doctorsPatients
        in: body
        name: Doctor
        required: true
        schema:
          $ref: '#/definitions/model.AddDiseaseToPatient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Disease
      tags:
      - Patients
  /patientsDisease/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Patient Disease
      tags:
      - Patients
  /patientsThreat/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Treatment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Patient Treatment
      tags:
      - Patients
  /rooms:
    get:
      consumes:
      - application/json
      description: get Rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Room'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Rooms
      tags:
      - Rooms
    post:
      consumes:
      - application/json
      description: add Room by json
      parameters:
      - description: Add room
        in: body
        name: Room
        required: true
        schema:
          $ref: '#/definitions/model.AddRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Room
      tags:
      - Rooms
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by room ID
      parameters:
      - description: Room ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a room
      tags:
      - Rooms
    get:
      consumes:
      - application/json
      description: get string by number
      parameters:
      - description: Room Number
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Room
      tags:
      - Rooms
    patch:
      consumes:
      - application/json
      description: Update by json room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update room
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a room
      tags:
      - Rooms
  /treatments:
    get:
      consumes:
      - application/json
      description: get Treatments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Treatment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List Treatments
      tags:
      - Treatments
    post:
      consumes:
      - application/json
      description: add Treatment by json
      parameters:
      - description: Add treatment
        in: body
        name: Treatment
        required: true
        schema:
          $ref: '#/definitions/model.AddTreatment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Treatment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Add a Treatment
      tags:
      - Treatments
  /treatments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by treatment ID
      parameters:
      - description: Treatment ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Treatment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Delete a treatment
      tags:
      - Treatments
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Treatment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Treatment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a Treatment
      tags:
      - Treatments
    patch:
      consumes:
      - application/json
      description: Update by json treatment
      parameters:
      - description: Treatment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update treatment
        in: body
        name: treatment
        required: true
        schema:
          $ref: '#/definitions/model.UpdateTreatment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Treatment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a treatment
      tags:
      - Treatments
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"

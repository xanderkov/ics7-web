// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/predicate"
	"hospital/internal/modules/db/ent/treatment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TreatmentUpdate is the builder for updating Treatment entities.
type TreatmentUpdate struct {
	config
	hooks    []Hook
	mutation *TreatmentMutation
}

// Where appends a list predicates to the TreatmentUpdate builder.
func (tu *TreatmentUpdate) Where(ps ...predicate.Treatment) *TreatmentUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTablets sets the "tablets" field.
func (tu *TreatmentUpdate) SetTablets(s string) *TreatmentUpdate {
	tu.mutation.SetTablets(s)
	return tu
}

// SetPsychologicalTreatment sets the "psychologicalTreatment" field.
func (tu *TreatmentUpdate) SetPsychologicalTreatment(s string) *TreatmentUpdate {
	tu.mutation.SetPsychologicalTreatment(s)
	return tu
}

// SetSurvey sets the "survey" field.
func (tu *TreatmentUpdate) SetSurvey(s string) *TreatmentUpdate {
	tu.mutation.SetSurvey(s)
	return tu
}

// SetPatientNumber sets the "patientNumber" field.
func (tu *TreatmentUpdate) SetPatientNumber(i int) *TreatmentUpdate {
	tu.mutation.SetPatientNumber(i)
	return tu
}

// SetNillablePatientNumber sets the "patientNumber" field if the given value is not nil.
func (tu *TreatmentUpdate) SetNillablePatientNumber(i *int) *TreatmentUpdate {
	if i != nil {
		tu.SetPatientNumber(*i)
	}
	return tu
}

// ClearPatientNumber clears the value of the "patientNumber" field.
func (tu *TreatmentUpdate) ClearPatientNumber() *TreatmentUpdate {
	tu.mutation.ClearPatientNumber()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TreatmentUpdate) SetUpdatedAt(t time.Time) *TreatmentUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTreatID sets the "treat" edge to the Patient entity by ID.
func (tu *TreatmentUpdate) SetTreatID(id int) *TreatmentUpdate {
	tu.mutation.SetTreatID(id)
	return tu
}

// SetNillableTreatID sets the "treat" edge to the Patient entity by ID if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableTreatID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetTreatID(*id)
	}
	return tu
}

// SetTreat sets the "treat" edge to the Patient entity.
func (tu *TreatmentUpdate) SetTreat(p *Patient) *TreatmentUpdate {
	return tu.SetTreatID(p.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tu *TreatmentUpdate) Mutation() *TreatmentMutation {
	return tu.mutation
}

// ClearTreat clears the "treat" edge to the Patient entity.
func (tu *TreatmentUpdate) ClearTreat() *TreatmentUpdate {
	tu.mutation.ClearTreat()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TreatmentUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TreatmentMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreatmentUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreatmentUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreatmentUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TreatmentUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := treatment.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TreatmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(treatment.Table, treatment.Columns, sqlgraph.NewFieldSpec(treatment.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Tablets(); ok {
		_spec.SetField(treatment.FieldTablets, field.TypeString, value)
	}
	if value, ok := tu.mutation.PsychologicalTreatment(); ok {
		_spec.SetField(treatment.FieldPsychologicalTreatment, field.TypeString, value)
	}
	if value, ok := tu.mutation.Survey(); ok {
		_spec.SetField(treatment.FieldSurvey, field.TypeString, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(treatment.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.TreatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatTable,
			Columns: []string{treatment.TreatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TreatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatTable,
			Columns: []string{treatment.TreatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TreatmentUpdateOne is the builder for updating a single Treatment entity.
type TreatmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TreatmentMutation
}

// SetTablets sets the "tablets" field.
func (tuo *TreatmentUpdateOne) SetTablets(s string) *TreatmentUpdateOne {
	tuo.mutation.SetTablets(s)
	return tuo
}

// SetPsychologicalTreatment sets the "psychologicalTreatment" field.
func (tuo *TreatmentUpdateOne) SetPsychologicalTreatment(s string) *TreatmentUpdateOne {
	tuo.mutation.SetPsychologicalTreatment(s)
	return tuo
}

// SetSurvey sets the "survey" field.
func (tuo *TreatmentUpdateOne) SetSurvey(s string) *TreatmentUpdateOne {
	tuo.mutation.SetSurvey(s)
	return tuo
}

// SetPatientNumber sets the "patientNumber" field.
func (tuo *TreatmentUpdateOne) SetPatientNumber(i int) *TreatmentUpdateOne {
	tuo.mutation.SetPatientNumber(i)
	return tuo
}

// SetNillablePatientNumber sets the "patientNumber" field if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillablePatientNumber(i *int) *TreatmentUpdateOne {
	if i != nil {
		tuo.SetPatientNumber(*i)
	}
	return tuo
}

// ClearPatientNumber clears the value of the "patientNumber" field.
func (tuo *TreatmentUpdateOne) ClearPatientNumber() *TreatmentUpdateOne {
	tuo.mutation.ClearPatientNumber()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TreatmentUpdateOne) SetUpdatedAt(t time.Time) *TreatmentUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTreatID sets the "treat" edge to the Patient entity by ID.
func (tuo *TreatmentUpdateOne) SetTreatID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetTreatID(id)
	return tuo
}

// SetNillableTreatID sets the "treat" edge to the Patient entity by ID if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableTreatID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetTreatID(*id)
	}
	return tuo
}

// SetTreat sets the "treat" edge to the Patient entity.
func (tuo *TreatmentUpdateOne) SetTreat(p *Patient) *TreatmentUpdateOne {
	return tuo.SetTreatID(p.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tuo *TreatmentUpdateOne) Mutation() *TreatmentMutation {
	return tuo.mutation
}

// ClearTreat clears the "treat" edge to the Patient entity.
func (tuo *TreatmentUpdateOne) ClearTreat() *TreatmentUpdateOne {
	tuo.mutation.ClearTreat()
	return tuo
}

// Where appends a list predicates to the TreatmentUpdate builder.
func (tuo *TreatmentUpdateOne) Where(ps ...predicate.Treatment) *TreatmentUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TreatmentUpdateOne) Select(field string, fields ...string) *TreatmentUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Treatment entity.
func (tuo *TreatmentUpdateOne) Save(ctx context.Context) (*Treatment, error) {
	tuo.defaults()
	return withHooks[*Treatment, TreatmentMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) SaveX(ctx context.Context) *Treatment {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TreatmentUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TreatmentUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := treatment.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TreatmentUpdateOne) sqlSave(ctx context.Context) (_node *Treatment, err error) {
	_spec := sqlgraph.NewUpdateSpec(treatment.Table, treatment.Columns, sqlgraph.NewFieldSpec(treatment.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Treatment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, treatment.FieldID)
		for _, f := range fields {
			if !treatment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != treatment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Tablets(); ok {
		_spec.SetField(treatment.FieldTablets, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PsychologicalTreatment(); ok {
		_spec.SetField(treatment.FieldPsychologicalTreatment, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Survey(); ok {
		_spec.SetField(treatment.FieldSurvey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(treatment.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.TreatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatTable,
			Columns: []string{treatment.TreatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TreatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatTable,
			Columns: []string{treatment.TreatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Treatment{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package treatment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the treatment type in the database.
	Label = "treatment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTablets holds the string denoting the tablets field in the database.
	FieldTablets = "tablets"
	// FieldPsychologicalTreatment holds the string denoting the psychologicaltreatment field in the database.
	FieldPsychologicalTreatment = "psychological_treatment"
	// FieldSurvey holds the string denoting the survey field in the database.
	FieldSurvey = "survey"
	// FieldPatientNumber holds the string denoting the patientnumber field in the database.
	FieldPatientNumber = "patient_number"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTreat holds the string denoting the treat edge name in mutations.
	EdgeTreat = "treat"
	// Table holds the table name of the treatment in the database.
	Table = "treatments"
	// TreatTable is the table that holds the treat relation/edge.
	TreatTable = "treatments"
	// TreatInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	TreatInverseTable = "patients"
	// TreatColumn is the table column denoting the treat relation/edge.
	TreatColumn = "patient_number"
)

// Columns holds all SQL columns for treatment fields.
var Columns = []string{
	FieldID,
	FieldTablets,
	FieldPsychologicalTreatment,
	FieldSurvey,
	FieldPatientNumber,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Order defines the ordering method for the Treatment queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTablets orders the results by the tablets field.
func ByTablets(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTablets, opts...).ToFunc()
}

// ByPsychologicalTreatment orders the results by the psychologicalTreatment field.
func ByPsychologicalTreatment(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPsychologicalTreatment, opts...).ToFunc()
}

// BySurvey orders the results by the survey field.
func BySurvey(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSurvey, opts...).ToFunc()
}

// ByPatientNumber orders the results by the patientNumber field.
func ByPatientNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPatientNumber, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTreatField orders the results by treat field.
func ByTreatField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTreatStep(), sql.OrderByField(field, opts...))
	}
}
func newTreatStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TreatInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TreatTable, TreatColumn),
	)
}

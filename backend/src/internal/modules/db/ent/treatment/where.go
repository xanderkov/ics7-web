// Code generated by ent, DO NOT EDIT.

package treatment

import (
	"hospital/internal/modules/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treatment {
	return predicate.Treatment(sql.FieldLTE(FieldID, id))
}

// Tablets applies equality check predicate on the "tablets" field. It's identical to TabletsEQ.
func Tablets(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldTablets, v))
}

// PsychologicalTreatment applies equality check predicate on the "psychologicalTreatment" field. It's identical to PsychologicalTreatmentEQ.
func PsychologicalTreatment(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldPsychologicalTreatment, v))
}

// Survey applies equality check predicate on the "survey" field. It's identical to SurveyEQ.
func Survey(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldSurvey, v))
}

// PatientNumber applies equality check predicate on the "patientNumber" field. It's identical to PatientNumberEQ.
func PatientNumber(v int) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldPatientNumber, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldUpdatedAt, v))
}

// TabletsEQ applies the EQ predicate on the "tablets" field.
func TabletsEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldTablets, v))
}

// TabletsNEQ applies the NEQ predicate on the "tablets" field.
func TabletsNEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldTablets, v))
}

// TabletsIn applies the In predicate on the "tablets" field.
func TabletsIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldTablets, vs...))
}

// TabletsNotIn applies the NotIn predicate on the "tablets" field.
func TabletsNotIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldTablets, vs...))
}

// TabletsGT applies the GT predicate on the "tablets" field.
func TabletsGT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGT(FieldTablets, v))
}

// TabletsGTE applies the GTE predicate on the "tablets" field.
func TabletsGTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGTE(FieldTablets, v))
}

// TabletsLT applies the LT predicate on the "tablets" field.
func TabletsLT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLT(FieldTablets, v))
}

// TabletsLTE applies the LTE predicate on the "tablets" field.
func TabletsLTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLTE(FieldTablets, v))
}

// TabletsContains applies the Contains predicate on the "tablets" field.
func TabletsContains(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContains(FieldTablets, v))
}

// TabletsHasPrefix applies the HasPrefix predicate on the "tablets" field.
func TabletsHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasPrefix(FieldTablets, v))
}

// TabletsHasSuffix applies the HasSuffix predicate on the "tablets" field.
func TabletsHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasSuffix(FieldTablets, v))
}

// TabletsEqualFold applies the EqualFold predicate on the "tablets" field.
func TabletsEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEqualFold(FieldTablets, v))
}

// TabletsContainsFold applies the ContainsFold predicate on the "tablets" field.
func TabletsContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContainsFold(FieldTablets, v))
}

// PsychologicalTreatmentEQ applies the EQ predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentNEQ applies the NEQ predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentNEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentIn applies the In predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldPsychologicalTreatment, vs...))
}

// PsychologicalTreatmentNotIn applies the NotIn predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentNotIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldPsychologicalTreatment, vs...))
}

// PsychologicalTreatmentGT applies the GT predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentGT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGT(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentGTE applies the GTE predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentGTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGTE(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentLT applies the LT predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentLT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLT(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentLTE applies the LTE predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentLTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLTE(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentContains applies the Contains predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentContains(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContains(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentHasPrefix applies the HasPrefix predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasPrefix(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentHasSuffix applies the HasSuffix predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasSuffix(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentEqualFold applies the EqualFold predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEqualFold(FieldPsychologicalTreatment, v))
}

// PsychologicalTreatmentContainsFold applies the ContainsFold predicate on the "psychologicalTreatment" field.
func PsychologicalTreatmentContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContainsFold(FieldPsychologicalTreatment, v))
}

// SurveyEQ applies the EQ predicate on the "survey" field.
func SurveyEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldSurvey, v))
}

// SurveyNEQ applies the NEQ predicate on the "survey" field.
func SurveyNEQ(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldSurvey, v))
}

// SurveyIn applies the In predicate on the "survey" field.
func SurveyIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldSurvey, vs...))
}

// SurveyNotIn applies the NotIn predicate on the "survey" field.
func SurveyNotIn(vs ...string) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldSurvey, vs...))
}

// SurveyGT applies the GT predicate on the "survey" field.
func SurveyGT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGT(FieldSurvey, v))
}

// SurveyGTE applies the GTE predicate on the "survey" field.
func SurveyGTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldGTE(FieldSurvey, v))
}

// SurveyLT applies the LT predicate on the "survey" field.
func SurveyLT(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLT(FieldSurvey, v))
}

// SurveyLTE applies the LTE predicate on the "survey" field.
func SurveyLTE(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldLTE(FieldSurvey, v))
}

// SurveyContains applies the Contains predicate on the "survey" field.
func SurveyContains(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContains(FieldSurvey, v))
}

// SurveyHasPrefix applies the HasPrefix predicate on the "survey" field.
func SurveyHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasPrefix(FieldSurvey, v))
}

// SurveyHasSuffix applies the HasSuffix predicate on the "survey" field.
func SurveyHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldHasSuffix(FieldSurvey, v))
}

// SurveyEqualFold applies the EqualFold predicate on the "survey" field.
func SurveyEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldEqualFold(FieldSurvey, v))
}

// SurveyContainsFold applies the ContainsFold predicate on the "survey" field.
func SurveyContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(sql.FieldContainsFold(FieldSurvey, v))
}

// PatientNumberEQ applies the EQ predicate on the "patientNumber" field.
func PatientNumberEQ(v int) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldPatientNumber, v))
}

// PatientNumberNEQ applies the NEQ predicate on the "patientNumber" field.
func PatientNumberNEQ(v int) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldPatientNumber, v))
}

// PatientNumberIn applies the In predicate on the "patientNumber" field.
func PatientNumberIn(vs ...int) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldPatientNumber, vs...))
}

// PatientNumberNotIn applies the NotIn predicate on the "patientNumber" field.
func PatientNumberNotIn(vs ...int) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldPatientNumber, vs...))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTreat applies the HasEdge predicate on the "treat" edge.
func HasTreat() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TreatTable, TreatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTreatWith applies the HasEdge predicate on the "treat" edge with a given conditions (other predicates).
func HasTreatWith(preds ...predicate.Patient) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := newTreatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
